package sespage

// import (
// 	"testing"
// 	"encoding/json"
// 	// "fmt"
// 	// "os/exec"
// 	// "bytes"
// 	"log"
// )

// func TestPage2Virtual(t *testing.T) {
// 	raw := []byte{
// 		0x02, 0x06, 0x01, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0xd4, 0x0d,
// 		0x01, 0x03, 0xd4, 0x0d, 0x01, 0x03, 0xde, 0x05, 0x01, 0x03, 0xde, 0x05, 0x01, 0x03, 0xd4, 0x05,
// 		0x01, 0x03, 0xd4, 0x05, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2d, 0x00, 0x01, 0x00, 0x2d, 0x00,
// 		0x01, 0x00, 0x30, 0x00, 0x01, 0x00, 0x3a, 0x00, 0x01, 0x00, 0x2d, 0x00, 0x01, 0x00, 0x2f, 0x00,
// 		0x01, 0x00, 0x2f, 0x00, 0x01, 0x00, 0x3b, 0x00, 0x01, 0x00, 0x2b, 0x00, 0x01, 0x00, 0x2b, 0x00,
// 		0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x2c, 0x00, 0x01, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x3b, 0x00,
// 		0x01, 0x00, 0x2c, 0x00, 0x01, 0x00, 0x31, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x80,
// 		0x01, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x01, 0x4b,
// 		0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x01, 0x49,
// 		0x01, 0x00, 0x04, 0xbf, 0x01, 0x00, 0x04, 0xca, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
// 		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0xff, 0x00, 0x01, 0x03, 0xff, 0x00,
// 		0x01, 0x03, 0xff, 0x00, 0x01, 0x03, 0xff, 0x00}
// 	page := StatusDiagnosticPage{}
// 	page.Decode(raw)

// 	js, _ := json.MarshalIndent(page, "", "    ")
// 	log.Printf("%s\n", js)
// }
