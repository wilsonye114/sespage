package sespage

import (
	"fmt"
	"testing"
	"encoding/json"
)

func TestPage1(t *testing.T) {
	pageraw := []byte{
		0x01, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x09, 0x44, 0x50, 0x0e, 0x0e, 0xca,
		0x02, 0x24, 0x12, 0xff, 0x43, 0x45, 0x4c, 0x45, 0x53, 0x54, 0x49, 0x43, 0x52, 0x30, 0x39, 0x33,
		0x34, 0x2d, 0x58, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x20, 0x30, 0x34, 0x32, 0x35,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x17, 0x3c, 0x00, 0x12, 0x02, 0x02, 0x00, 0x0d, 0x03, 0x06, 0x00, 0x08, 0x04, 0x10, 0x00, 0x13,
		0x07, 0x02, 0x00, 0x04, 0x0e, 0x01, 0x00, 0x0f, 0x12, 0x0a, 0x00, 0x0f, 0x18, 0x02, 0x00, 0x0d,
		0x19, 0x04, 0x00, 0x0e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
		0x20, 0x53, 0x6c, 0x6f, 0x74, 0x00, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x53, 0x75, 0x70, 0x70,
		0x6c, 0x79, 0x00, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x00, 0x54, 0x65, 0x6d, 0x70, 0x65,
		0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x00, 0x45, 0x53,
		0x4d, 0x00, 0x45, 0x72, 0x6f, 0x73, 0x20, 0x45, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
		0x00, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x00,
		0x53, 0x41, 0x53, 0x20, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x00, 0x53, 0x41, 0x53,
		0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x00}
	fmt.Printf("%v\n", pageraw)
	// page := NewConfigurationDiagnosticPage()
	// pagemap, _ := page.DecodeHead(pageraw)
	// // fmt.Printf("%v\n", pagemap)

	// pagejson, _ := json.MarshalIndent(pagemap, "", "    ")
	// fmt.Printf("%s\n", pagejson)

	page := NewConfigurationDiagnosticPage()
	pagemap, _ := page.Decode(pageraw)
	// fmt.Printf("%v\n", pagemap)

	pagejson, _ := json.MarshalIndent(pagemap, "", "    ")
	fmt.Printf("%s\n", pagejson)
}